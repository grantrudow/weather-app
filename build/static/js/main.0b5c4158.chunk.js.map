{"version":3,"sources":["resources/images/sunnyDay.jpg","resources/images/cloudyDay.jpg","resources/images/rainyDay.jpg","resources/images/sunset.jpg","StateProvider.js","axios.js","components/WeatherCard/WeatherCard.js","components/SearchBar/SearchBar.js","reducer.js","components/HeroDisplay/HeroDisplay.js","components/Home/Home.js","components/MobileHero/MobileHero.js","components/MobileWeather/MobileWeather.js","components/MobileSearch/MobileSearch.js","components/MobileHome/MobileHome.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","instance","axios","create","baseURL","WeatherCard","weather","location","className","cloudCoverage","humidity","windSpeed","SearchBar","getLocationWeather","useState","searchText","setSearchText","type","placeholder","onChange","event","target","onClick","text","split","city","state","country","style","fontSize","getFahrenheit","temp","tempF","Math","round","action","console","log","item","HeroDisplay","currentTemp","Home","useEffect","MobileHero","MobileWeather","MobileSearch","MobileHome","App","dispatch","a","method","url","response","data","name","timezone","sunrise","sunset","weatherForecast","list","main","clouds","all","wind","speed","displayIn","src","sunnyDay","alt","Boolean","window","hostname","match","ReactDOM","render","StrictMode","status","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0b5c4158.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sunnyDay.9a95acb2.jpg\";","module.exports = __webpack_public_path__ + \"static/media/cloudyDay.d48f7960.jpg\";","module.exports = __webpack_public_path__ + \"static/media/rainyDay.b639bf40.jpg\";","module.exports = __webpack_public_path__ + \"static/media/sunset.7a0bf9ec.jpg\";","import React, { createContext, useContext, useReducer} from 'react';\n\n// Prepares data layer\nexport const StateContext = createContext();\n\n// Wrap the app and prive the data layer to all components\nexport const StateProvider = ({ reducer, initialState, children }) => (\n\t<StateContext.Provider value={useReducer(reducer, initialState)}>\n\t\t{children}\n\t</StateContext.Provider>\n)\n\n// Pull information from data layer\nexport const useStateValue = () => useContext(StateContext);","import axios from 'axios';\n\nconst instance = axios.create({\n\tbaseURL: 'https://api.openweathermap.org/data/2.5'\n})\n\nexport default instance;","import React from 'react';\nimport './WeatherCard.css';\nimport { useStateValue } from '../../StateProvider';\n\nfunction WeatherCard() {\n  const [{location, weather}, dispatch] = useStateValue();\n\n  return (\n    <div className=\"weatherCard grid\">\n      <h4>Weather Details</h4>\n\n      <div className=\"weatherCard__details\">\n        <div className=\"weatherCard__headers\">\n          <h4>Cloud Coverage</h4>\n          <h4>Humidity</h4>\n          <h4>Wind</h4>\n        </div>\n        <div className=\"weatherCard__results\">\n          <h4>{weather.cloudCoverage} %</h4>\n          <h4>{weather.humidity} %</h4>\n          <h4>{weather.windSpeed} mph</h4>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default WeatherCard;\n","import React, { useState, useEffect } from 'react';\nimport './SearchBar.css'\nimport { useStateValue } from '../../StateProvider';\n\n// Icons\nimport SearchIcon from '@material-ui/icons/Search';\n\nfunction SearchBar({getLocationWeather}) {\n\tconst [{weather}, dispatch] = useStateValue();\n\tconst [searchText, setSearchText] = useState();\n\n\tconst setLocation = () => {\n\t\tif (searchText != null) {\n\t\t\tlet text = searchText.split(',')\n\t\t\tlet city = text[0]\n\t\t\tlet state = text[1]\n\t\t\tlet country = text[3]\n\n\t\t\tgetLocationWeather(city, state, country);\n\t\t}\n\t}\n\n\n\treturn (\n\t\t<div className=\"searchBar grid\">\n\t\t\t<input \n\t\t\ttype=\"text\" \n\t\t\tplaceholder=\"Ex: Oxford, MS, US\" \n\t\t\tonChange={event => setSearchText(event.target.value)}\n\t\t\t/>\n\t\t\t<button type=\"submit\" onClick={setLocation}>\n\t\t\t\t<SearchIcon style={{ fontSize: 40 }}/>\n\t\t\t</button>\n\t\t</div>\n\t)\n}\n\nexport default SearchBar;\n","export const initialState = {\n\tlocation: {\n\t\tcity: '',\n\t\tstatus: false,\n\t\tstate: '',\n\t\tcountry: ''\n\t},\n\tweather: {\n\t\tcity: '',\n\t\tcountry: '',\n\t\ttimezone: 0,\n\t\tsunrise: 0,\n\t\tsunset: 0,\n\t\tweatherForecast: [],\n\t\tcurrentTemp: 300\n\t}\n}\n\nexport const getFahrenheit = (temp) => {\n\tlet tempF = ((temp-273.15)*(9/5)+32)\n\treturn Math.round(tempF)\n}\n\nexport const getCelsius = (temp) => {\n\tlet tempC = ((temp-273.15))\n\treturn Math.round(tempC)\n}\n\nconst reducer = (state, action) => {\n\tconsole.log(action);\n\n\tswitch(action.type) {\n\t\tcase 'SET_LOCATION':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tlocation: action.item\n\t\t\t}\n\t\tcase 'SET_WEATHER_DATA':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tweather: action.item\n\t\t\t}\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n\nexport default reducer;","import React from 'react';\nimport './HeroDisplay.css';\nimport { useStateValue } from '../../StateProvider';\nimport { getFahrenheit, getCelsius } from '../../reducer';\n\nfunction HeroDisplay() {\n    const [{weather}, dispatch] =useStateValue();\n\n    return (\n        <div className=\"heroDisplay\">\n            <div className=\"spacer\"></div>\n            <div className=\"heroDisplay__content grid\">\n                <h1>{`${getFahrenheit(weather.currentTemp)}ÂºF`}</h1>\n                <div className=\"heroDisplay__locTime\">\n                    <h1>{weather.city}</h1>\n                    <p>06:09 - Monday, 9 Sept '19</p>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default HeroDisplay;","import React, { useEffect } from 'react';\nimport './Home.css';\nimport { useStateValue } from '../../StateProvider';\n\n\n// Components\nimport WeatherCard from '../WeatherCard/WeatherCard';\nimport SearchBar from '../SearchBar/SearchBar';\nimport HeroDisplay from '../HeroDisplay/HeroDisplay';\n\nfunction Home({getLocationWeather}) {\n\tconst [{weather}, dispatch] = useStateValue();\t\n\n\tuseEffect(() => {\n\t\t// Sets default location to Boston, MA\n\t\tlet city = 'Boston';\n\t\tlet state = 'MA';\n\t\tlet country = 'US';\n\n\t\tgetLocationWeather(city, state, country);\n\t}, [])\n\n\treturn (\n\t\t<div className=\"home grid\">\n\t\t\t<div className=\"home__left\">\n        \t\t<HeroDisplay />\n      \t\t</div>\n\t\t\t<div className=\"home__right\">\n        \t\t<SearchBar getLocationWeather={getLocationWeather}/>\n\t\t\t\t<div className=\"home__presets\">\n\t\t\t\t\t<h4 onClick={() => getLocationWeather('Boston', 'MA', 'US')}>Boston</h4>\n\t\t\t\t\t<h4 onClick={() => getLocationWeather('New York', 'NY', 'US')}>New York</h4>\n\t\t\t\t\t<h4 onClick={() => getLocationWeather('London', 'Uk')}>London</h4>\n\t\t\t\t\t<h4 onClick={() => getLocationWeather('Atlanta', 'GA', 'US')}>Atlanta</h4>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"home__weatherDetails\">\n\t\t\t\t\t<WeatherCard />\t\t\t\t\n\t\t\t\t</div>\n      \t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default Home;\n","import React from 'react'\nimport './MobileHero.css';\nimport { useStateValue } from '../../StateProvider';\nimport { getFahrenheit, getCelsius } from '../../reducer';\n\nfunction MobileHero() {\n\tconst [{weather}, dispatch] =useStateValue();\n\n\treturn (\n\t\t<div className=\"mobileHero grid\">\n\t\t\t<div className=\"mobileHero__content grid\">\n\t\t\t\t<h1>{`${getFahrenheit(weather.currentTemp)}ÂºF`}</h1>\n\t\t\t\t<div className=\"mobileHero__locTime\">\n\t\t\t\t\t<h1>{weather.city}</h1>\n\t\t\t\t\t<p>06:09 - Monday, 9 Sept '19</p>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default MobileHero;\n","import React from 'react';\nimport './MobileWeather.css';\nimport {useStateValue} from '../../StateProvider';\n\nfunction MobileWeather() {\n    const [{weather}, dispatch] = useStateValue();\n\n    return (\n        <div className=\"mobileWeather grid\">\n            <h4>Weather Details</h4>\n\n            <div className=\"mobileWeather__details\">\n                <div className=\"mobileWeather__headers\">\n                    <h4>Cloud Coverage</h4>\n                    <h4>Humidity</h4>\n                    <h4>Wind</h4>\n                </div>\n                <div className=\"mobileWeather__results\">\n                    <h4>{weather.cloudCoverage} %</h4>\n                    <h4>{weather.humidity} %</h4>\n                    <h4>{weather.windSpeed} mph</h4>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default MobileWeather;\n","import React, { useState } from 'react';\nimport './MobileSearch.css';\nimport { useStateValue } from '../../StateProvider';\n\n// Icons\nimport SearchIcon from '@material-ui/icons/Search';\n\nfunction MobileSearch({getLocationWeather}) {\n    const [{weather}, dispatch] = useStateValue();\n\tconst [searchText, setSearchText] = useState();\n\n\tconst setLocation = () => {\n\t\tif (searchText != null) {\n\t\t\tlet text = searchText.split(',')\n\t\t\tlet city = text[0]\n\t\t\tlet state = text[1]\n\t\t\tlet country = text[3]\n\n\t\t\tgetLocationWeather(city, state, country);\n\t\t}\n    }\n    \n    return (\n        <div className=\"mobileSearch grid\">\n            <input \n\t\t\t    type=\"text\" \n\t\t\t    placeholder=\"Ex: Oxford, MS, US\" \n\t\t\t    onChange={event => setSearchText(event.target.value)}\n\t\t\t/>\n\t\t\t<button type=\"submit\" onClick={setLocation}>\n\t\t\t\t<SearchIcon style={{ fontSize: 30 }}/>\n\t\t\t</button>\n        </div>\n    )\n}\n\nexport default MobileSearch;\n","import React, {useEffect} from 'react';\nimport './MobileHome.css';\n\n// Components\nimport MobileHero from '../MobileHero/MobileHero';\nimport MobileWeather from '../MobileWeather/MobileWeather';\nimport MobileSearch from '../MobileSearch/MobileSearch';\n\nfunction MobileHome({getLocationWeather}) {\n\n\tuseEffect(() => {\n\t\t// Sets default location to Boston, MA\n\t\tlet city = 'Boston';\n\t\tlet state = 'MA';\n\t\tlet country = 'US';\n\n\t\tgetLocationWeather(city, state, country);\n\t}, [])\n\t\n\treturn (\n\t\t<div className=\"mobileHome\">\n\t\t\t<MobileHero />\n\t\t\t<MobileSearch getLocationWeather={getLocationWeather}/>\n\t\t\t<MobileWeather />\n\t\t</div>\n\t)\n}\n\nexport default MobileHome\n","import React, { useEffect } from 'react';\nimport './App.css';\nimport { useStateValue } from './StateProvider';\nimport axios from './axios';\nimport { Responsive } from \"responsive-react\";\n\n// Components\nimport Home from './components/Home/Home';\nimport MobileHome from './components/MobileHome/MobileHome';\n\n// Images\n// Possibly make this a component so it will display differently\nimport cloudyDay from './resources/images/cloudyDay.jpg';\nimport rainyDay from './resources/images/rainyDay.jpg';\nimport sunnyDay from './resources/images/sunnyDay.jpg'\nimport sunset from './resources/images/sunset.jpg';\n\nfunction App() {\n  const [{location, weather}, dispatch] = useStateValue();\n  const weatherApi ='ed8879c76ac5097000f1c6a9159c4e7f';\n\n  const getLocationWeather = async (city, state, country) => {\n    const response = await axios({\n      method: 'get',\n      url: `/forecast?q=${city},${state},${country}&appid=${weatherApi}`\n    })\n    const data = response.data;\n  \n  \n    dispatch({\n      type: 'SET_WEATHER_DATA',\n      item: {\n        city: data.city.name,\n        country: data.city.country,\n        timezone: data.city.timezone,\n        sunrise: data.city.sunrise,\n        sunset: data.city.sunset,\n        weatherForecast: data.list,\n        currentTemp: data.list[0].main.temp,\n        humidity: data.list[0].main.humidity,\n        cloudCoverage: data.list[0].clouds.all,\n        windSpeed: data.list[0].wind.speed\n      }\n    })\n    }\n    \n  return (\n    <div className=\"App\">\n      <Responsive displayIn={[\"Laptop\"]}>\n        <Home getLocationWeather={getLocationWeather} /> \n      </Responsive>\n      <Responsive displayIn={[\"Mobile\", \"Tablet\"]}>\n        <MobileHome getLocationWeather={getLocationWeather}/>\n      </Responsive>\n      <img \n        src={sunnyDay} \n        alt=\"Type of Weather\"\n        className=\"background-image\" \n        />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport reducer, { initialState } from './reducer';\nimport { StateProvider } from './StateProvider';\n\nReactDOM.render(\n  <React.StrictMode>\n    <StateProvider initialState={initialState} reducer={reducer}>\n      <App />\n    </StateProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}